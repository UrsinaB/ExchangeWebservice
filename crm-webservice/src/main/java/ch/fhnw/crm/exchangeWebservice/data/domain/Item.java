package ch.fhnw.crm.exchangeWebservice.data.domain;

import java.sql.Date;
import java.time.LocalDate;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;

import io.swagger.v3.oas.annotations.Hidden;
import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotEmpty;

// declaring a database relation item (the item to be exchanged)
// @Table is used to specify the name of the table in the database

@Entity
@Table(name = "items")
public class Item {

	// defining the primary key value that will be automatically generated by the database


    @Id
	@GeneratedValue
	@Hidden
	private Long itemId;

	@NotEmpty(message = "Please provide a title for your item")
	private String title;

	@NotEmpty(message ="Please provide a description for your item")
	@Column(length = 1000)
	private String description;

	// @Temproal is used to specify the date format

	@Column(name ="ListingDate")
	@Temporal(TemporalType.DATE)
	private Date listingDate;

	@Enumerated(EnumType.STRING)
	private ItemStatus itemStatus;

	@ManyToOne
	@JoinColumn(name = "categoryId")
	private ItemCategory itemCategory;

	// one item belongs to one user
	@ManyToOne
	@JoinColumn(name = "userId")
	private User user;


	@OneToOne
	@JoinColumn(name = "transactionId")
	private Transaction transaction;

	//constructors, getters and setters

	public Long getItemId() {
		return itemId;
	}

	public void setItemId(Long itemId) {
	  this.itemId = itemId;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public Date getListingDate() {
		return listingDate;
	}

	public void setListingDate(String string) {
		this.listingDate = listingDate;
	}

	public ItemStatus getItemStatus() {
		return itemStatus;
	}

	public void setItemStatus(ItemStatus itemStatus) {
		this.itemStatus = itemStatus;
	}

	public ItemCategory getItemCategory() {
		return getItemCategory();
	}

	public void setItemCategory(ItemCategory itemCategory) {
		this.itemCategory = itemCategory;
	}

	public Transaction getTransaction() {
		return transaction;
	}

	public void setTransaction(Transaction transaction) {
		this.transaction = transaction;
	}

	public Item() {
		this.listingDate = Date.valueOf(LocalDate.now());
		this.itemStatus = ItemStatus.AVAILABLE;
	}

	}

	
